type Query {
  listEvents(filter: EventFilter): [Event]
  readEvent(id: ID): Event

  listOrganisers(filter: OrganiserFilter): [Organiser]
  readOrganiser(id: ID): Organiser
}

type Mutation {
  createEvent(input: EventInput!): Event
  updateEvent(id: ID, input: EventInput): Event
  deleteEvent(id: ID): ID

  createOrganiser(input: OrganiserInput!): Organiser
  updateOrganiser(id: ID, input: OrganiserInput): Organiser
  deleteOrganiser(id: ID): ID
}

type Event {
  id: ID
  name: String
  organiser: Organiser
  description: String
  venue: String
  venue_location: String
  availability: Int
  capacity: Int
  type: String
  category: String
  status: String
  recurrence: String
  date: String
  image: String
  price: Float
}

type Organiser {
  id: ID
  name: String
  logo: String
  description: String
  events: [Event]
}

input EventInput {
  id: Int
  name: String!
  organiser: Int
  description: String
  venue: String
  venue_location: String
  availability: Int
  capacity: Int
  type: String
  category: String
  status: String
  recurrence: String
  date: String
  image: String
  price: Float
  __typename: String
}

input OrganiserInput {
  name: String!
  logo: String
  description: String
  __typename: String
}

input EventFilter {
  name: String
  organiser: Int
  description: String
  venue: String
  venue_location: String
  availability: Int
  capacity: Int
  type: String
  category: String
  status: String
  recurrence: String
  date_from: String
  date_to: String
  price_from: Float
  price_to: Float
}

input OrganiserFilter {
  name: String
  description: String
}